<?php
/**
 * The file that extends WP_Error notification capabilities.
 *
 * @package    ThoughtfulWeb\Library
 * @subpackage Monitor
 * @copyright  Zachary Watkins 2021
 * @author     Zachary Watkins <watkinza@gmail.com>
 * @license    http://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0-or-later
 * @link       https://github.com/zachwatkins/wordpress-plugin-name/blob/master/util/class-alert.php
 * @since      0.1.0
 */

declare(strict_types=1);
namespace ThoughtfulWeb\Library\Monitor;

/**
 * The class that registers page template file registration.
 *
 * @see   https://www.php.net/manual/en/language.oop5.basic.php
 * @since 0.1.0
 */
class Event {

	/**
	 * Default class constructor arguments.
	 *
	 * @var array $default_args The default arguments used when handling the error.
	 */
	private $default_args = array(
		'code'    => '',
		'message' => '',
		'data'    => array(),
		'channel' => $channel,
		'throws'  => $throws,
	);

	/**
	 * The WP_Error object.
	 *
	 * @var WP_Error $error The WP_Error object generated by the constructor method.
	 */
	private $wp_error;

	/**
	 * The Event monitor configurations.
	 *
	 * @var array config The configurations of the event monitor.
	 */

	/**
	 * The class constructor.
	 *
	 * @todo Implement $channel options for email, error log, webhook, WP Admin alert, etc.
	 *
	 * @param string|int $code      Error code.
	 * @param string     $message   Error message.
	 * @param mixed      $data      Optional. Error data. Default is empty array.
	 * @param string[]   $channel   Optional. How the event is communicated. Default is 'die'.
	 *                              Suggested implementation options in todo above.
	 * @param int[]      $throws    Optional. The event code. Accepts an integer, array of integers,
	 *                              or constants like E_ERROR that represent integers. Default E_USER_ERROR.
	 */
	public function __construct( $code = '', $message = '', $data = '', $channel = 'halt', $throws = E_USER_ERROR ) {

		// Declare unique values as an array.
		$error_args
		 = array(
			'code'    => $code,
			'message' => $message,
			'data'    => $data,
		);
		array_filter( $provided_args, 'array_filter' );
		// Combine default values and unique values.
		$args = array_merge( $this->default_args, $provided_args );
		// Remove falsy values.
		$filtered_args = array_filter( $args, 'array_filter' );
		// If the provided args are falsy, return.
		if ( ! $provided_args ) {
			return;
		}

		$this->config = array_merge( $this->config, $filtered_args );

		// Monitor the error in question.
		add_action( 'wp_error_added', array( $this, 'wp_error_added' ), 10, 4 );
		// Generate a new error object.
		if ( $filtered_args ) {
			$this->wp_error = new \WP_Error( $args['code'], args['message'], args['data'] );
		}


	}

	/**
	 * Display an alert with precise context and delivery.
	 * Based on WP_Error class constructor.
	 *
	 * @see   https://developer.wordpress.org/reference/classes/wp_error/
	 * @see   https://developer.wordpress.org/reference/functions/is_wp_error/
	 * @see   https://developer.wordpress.org/reference/functions/wp_die/
	 * @see   https://github.com/WordPress/WordPress-Coding-Standards/wiki/Escaping-a-WP_Error-object
	 * @since 0.1.0
	 *
	 * @param  WP_Error $event The error event object.
	 * @return bool|void
	 */
	public static function action_die( $code, $message, $data, $wp_error ) {

		if ( $code !== $this->args['code'] ) {
			return;
		}

		switch ($this->channel) {
			case 'value':
				# code...
				break;

			default:
				# code...
				break;
		}
		wp_die( self::escape_wp_error( $event ) ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped -- $alert is escaped before being passed in.

	}

	/**
	 * Copied from WordPress Coding Standards.
	 * Escape a WP_Error object for passing directly to wp_die().
	 *
	 * The wp_die() function accepts an WP_Error object as the first parameter, but it
	 * does not escape it's contents before printing it out to the user. By passing
	 * the object through this function before giving it to wp_die(), the potential for
	 * XSS should be avoided.
	 *
	 * @see https://github.com/WordPress/WordPress-Coding-Standards/wiki/Escaping-a-WP_Error-object
	 *
	 * @param WP_Error $error The error to escape.
	 *
	 * @return WP_Error The escaped error.
	 */
	private static function escape_wp_error( $error ) {

		$code = $error->get_error_code();

		$error_data = $error->error_data;

		if ( isset( $error_data[ $code ]['title'] ) ) {
			$error_data[ $code ]['title'] = wp_kses(
				$error->error_data[ $code ]['title'],
				'escape_wp_error_title'
			);
			$error->error_data            = $error_data;
		}

		$all_errors = $error->errors;

		foreach ( $all_errors as $code => $errors ) {
			foreach ( $errors as $key => $message ) {
				$all_errors[ $code ][ $key ] = wp_kses(
					$message,
					'escape_wp_error_message'
				);
			}
		}

		$error->errors = $all_errors;

		return $error;

	}
}
